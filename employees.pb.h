// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: employees.proto

#ifndef PROTOBUF_INCLUDED_employees_2eproto
#define PROTOBUF_INCLUDED_employees_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_employees_2eproto 

namespace protobuf_employees_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_employees_2eproto
class employee;
class employeeDefaultTypeInternal;
extern employeeDefaultTypeInternal _employee_default_instance_;
class employees;
class employeesDefaultTypeInternal;
extern employeesDefaultTypeInternal _employees_default_instance_;
namespace google {
namespace protobuf {
template<> ::employee* Arena::CreateMaybeMessage<::employee>(Arena*);
template<> ::employees* Arena::CreateMaybeMessage<::employees>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class employee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:employee) */ {
 public:
  employee();
  virtual ~employee();

  employee(const employee& from);

  inline employee& operator=(const employee& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  employee(employee&& from) noexcept
    : employee() {
    *this = ::std::move(from);
  }

  inline employee& operator=(employee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const employee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const employee* internal_default_instance() {
    return reinterpret_cast<const employee*>(
               &_employee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(employee* other);
  friend void swap(employee& a, employee& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline employee* New() const final {
    return CreateMaybeMessage<employee>(NULL);
  }

  employee* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<employee>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const employee& from);
  void MergeFrom(const employee& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(employee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string FirstName = 2;
  void clear_firstname();
  static const int kFirstNameFieldNumber = 2;
  const ::std::string& firstname() const;
  void set_firstname(const ::std::string& value);
  #if LANG_CXX11
  void set_firstname(::std::string&& value);
  #endif
  void set_firstname(const char* value);
  void set_firstname(const char* value, size_t size);
  ::std::string* mutable_firstname();
  ::std::string* release_firstname();
  void set_allocated_firstname(::std::string* firstname);

  // string LastName = 3;
  void clear_lastname();
  static const int kLastNameFieldNumber = 3;
  const ::std::string& lastname() const;
  void set_lastname(const ::std::string& value);
  #if LANG_CXX11
  void set_lastname(::std::string&& value);
  #endif
  void set_lastname(const char* value);
  void set_lastname(const char* value, size_t size);
  ::std::string* mutable_lastname();
  ::std::string* release_lastname();
  void set_allocated_lastname(::std::string* lastname);

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // float salary = 4;
  void clear_salary();
  static const int kSalaryFieldNumber = 4;
  float salary() const;
  void set_salary(float value);

  // @@protoc_insertion_point(class_scope:employee)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr firstname_;
  ::google::protobuf::internal::ArenaStringPtr lastname_;
  ::google::protobuf::int32 id_;
  float salary_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_employees_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class employees : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:employees) */ {
 public:
  employees();
  virtual ~employees();

  employees(const employees& from);

  inline employees& operator=(const employees& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  employees(employees&& from) noexcept
    : employees() {
    *this = ::std::move(from);
  }

  inline employees& operator=(employees&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const employees& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const employees* internal_default_instance() {
    return reinterpret_cast<const employees*>(
               &_employees_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(employees* other);
  friend void swap(employees& a, employees& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline employees* New() const final {
    return CreateMaybeMessage<employees>(NULL);
  }

  employees* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<employees>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const employees& from);
  void MergeFrom(const employees& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(employees* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .employee employees = 3;
  int employees_size() const;
  void clear_employees();
  static const int kEmployeesFieldNumber = 3;
  ::employee* mutable_employees(int index);
  ::google::protobuf::RepeatedPtrField< ::employee >*
      mutable_employees();
  const ::employee& employees(int index) const;
  ::employee* add_employees();
  const ::google::protobuf::RepeatedPtrField< ::employee >&
      employees() const;

  // @@protoc_insertion_point(class_scope:employees)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::employee > employees_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_employees_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// employee

// int32 ID = 1;
inline void employee::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 employee::id() const {
  // @@protoc_insertion_point(field_get:employee.ID)
  return id_;
}
inline void employee::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:employee.ID)
}

// string FirstName = 2;
inline void employee::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& employee::firstname() const {
  // @@protoc_insertion_point(field_get:employee.FirstName)
  return firstname_.GetNoArena();
}
inline void employee::set_firstname(const ::std::string& value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:employee.FirstName)
}
#if LANG_CXX11
inline void employee::set_firstname(::std::string&& value) {
  
  firstname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:employee.FirstName)
}
#endif
inline void employee::set_firstname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:employee.FirstName)
}
inline void employee::set_firstname(const char* value, size_t size) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:employee.FirstName)
}
inline ::std::string* employee::mutable_firstname() {
  
  // @@protoc_insertion_point(field_mutable:employee.FirstName)
  return firstname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* employee::release_firstname() {
  // @@protoc_insertion_point(field_release:employee.FirstName)
  
  return firstname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void employee::set_allocated_firstname(::std::string* firstname) {
  if (firstname != NULL) {
    
  } else {
    
  }
  firstname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:employee.FirstName)
}

// string LastName = 3;
inline void employee::clear_lastname() {
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& employee::lastname() const {
  // @@protoc_insertion_point(field_get:employee.LastName)
  return lastname_.GetNoArena();
}
inline void employee::set_lastname(const ::std::string& value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:employee.LastName)
}
#if LANG_CXX11
inline void employee::set_lastname(::std::string&& value) {
  
  lastname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:employee.LastName)
}
#endif
inline void employee::set_lastname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:employee.LastName)
}
inline void employee::set_lastname(const char* value, size_t size) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:employee.LastName)
}
inline ::std::string* employee::mutable_lastname() {
  
  // @@protoc_insertion_point(field_mutable:employee.LastName)
  return lastname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* employee::release_lastname() {
  // @@protoc_insertion_point(field_release:employee.LastName)
  
  return lastname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void employee::set_allocated_lastname(::std::string* lastname) {
  if (lastname != NULL) {
    
  } else {
    
  }
  lastname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastname);
  // @@protoc_insertion_point(field_set_allocated:employee.LastName)
}

// float salary = 4;
inline void employee::clear_salary() {
  salary_ = 0;
}
inline float employee::salary() const {
  // @@protoc_insertion_point(field_get:employee.salary)
  return salary_;
}
inline void employee::set_salary(float value) {
  
  salary_ = value;
  // @@protoc_insertion_point(field_set:employee.salary)
}

// -------------------------------------------------------------------

// employees

// repeated .employee employees = 3;
inline int employees::employees_size() const {
  return employees_.size();
}
inline void employees::clear_employees() {
  employees_.Clear();
}
inline ::employee* employees::mutable_employees(int index) {
  // @@protoc_insertion_point(field_mutable:employees.employees)
  return employees_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::employee >*
employees::mutable_employees() {
  // @@protoc_insertion_point(field_mutable_list:employees.employees)
  return &employees_;
}
inline const ::employee& employees::employees(int index) const {
  // @@protoc_insertion_point(field_get:employees.employees)
  return employees_.Get(index);
}
inline ::employee* employees::add_employees() {
  // @@protoc_insertion_point(field_add:employees.employees)
  return employees_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::employee >&
employees::employees() const {
  // @@protoc_insertion_point(field_list:employees.employees)
  return employees_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_employees_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: learning_example.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_learning_5fexample_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_learning_5fexample_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_learning_5fexample_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_learning_5fexample_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_learning_5fexample_2eproto;
namespace Actia {
class feature;
struct featureDefaultTypeInternal;
extern featureDefaultTypeInternal _feature_default_instance_;
class point;
struct pointDefaultTypeInternal;
extern pointDefaultTypeInternal _point_default_instance_;
}  // namespace Actia
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Actia {

// ===================================================================


// -------------------------------------------------------------------

class point final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Actia.point) */ {
 public:
  inline point() : point(nullptr) {}
  ~point() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR point(
      ::google::protobuf::internal::ConstantInitialized);

  inline point(const point& from) : point(nullptr, from) {}
  inline point(point&& from) noexcept
      : point(nullptr, std::move(from)) {}
  inline point& operator=(const point& from) {
    CopyFrom(from);
    return *this;
  }
  inline point& operator=(point&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const point& default_instance() {
    return *internal_default_instance();
  }
  static inline const point* internal_default_instance() {
    return reinterpret_cast<const point*>(
        &_point_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(point& a, point& b) { a.Swap(&b); }
  inline void Swap(point* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(point* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  point* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<point>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const point& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const point& from) { point::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(point* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Actia.point"; }

 protected:
  explicit point(::google::protobuf::Arena* arena);
  point(::google::protobuf::Arena* arena, const point& from);
  point(::google::protobuf::Arena* arena, point&& from) noexcept
      : point(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNomFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string nom = 2;
  void clear_nom() ;
  const std::string& nom() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nom(Arg_&& arg, Args_... args);
  std::string* mutable_nom();
  PROTOBUF_NODISCARD std::string* release_nom();
  void set_allocated_nom(std::string* value);

  private:
  const std::string& _internal_nom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nom(
      const std::string& value);
  std::string* _internal_mutable_nom();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Actia.point)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      23, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nom_;
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_learning_5fexample_2eproto;
};
// -------------------------------------------------------------------

class feature final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Actia.feature) */ {
 public:
  inline feature() : feature(nullptr) {}
  ~feature() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR feature(
      ::google::protobuf::internal::ConstantInitialized);

  inline feature(const feature& from) : feature(nullptr, from) {}
  inline feature(feature&& from) noexcept
      : feature(nullptr, std::move(from)) {}
  inline feature& operator=(const feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline feature& operator=(feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const feature* internal_default_instance() {
    return reinterpret_cast<const feature*>(
        &_feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(feature& a, feature& b) { a.Swap(&b); }
  inline void Swap(feature* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(feature* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  feature* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<feature>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const feature& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const feature& from) { feature::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(feature* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Actia.feature"; }

 protected:
  explicit feature(::google::protobuf::Arena* arena);
  feature(::google::protobuf::Arena* arena, const feature& from);
  feature(::google::protobuf::Arena* arena, feature&& from) noexcept
      : feature(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNomFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string nom = 2;
  void clear_nom() ;
  const std::string& nom() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nom(Arg_&& arg, Args_... args);
  std::string* mutable_nom();
  PROTOBUF_NODISCARD std::string* release_nom();
  void set_allocated_nom(std::string* value);

  private:
  const std::string& _internal_nom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nom(
      const std::string& value);
  std::string* _internal_mutable_nom();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Actia.feature)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      25, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nom_;
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_learning_5fexample_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// point

// int32 id = 1;
inline void point::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t point::id() const {
  // @@protoc_insertion_point(field_get:Actia.point.id)
  return _internal_id();
}
inline void point::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Actia.point.id)
}
inline ::int32_t point::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void point::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// string nom = 2;
inline void point::clear_nom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nom_.ClearToEmpty();
}
inline const std::string& point::nom() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Actia.point.nom)
  return _internal_nom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void point::set_nom(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nom_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Actia.point.nom)
}
inline std::string* point::mutable_nom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nom();
  // @@protoc_insertion_point(field_mutable:Actia.point.nom)
  return _s;
}
inline const std::string& point::_internal_nom() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nom_.Get();
}
inline void point::_internal_set_nom(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nom_.Set(value, GetArena());
}
inline std::string* point::_internal_mutable_nom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.nom_.Mutable( GetArena());
}
inline std::string* point::release_nom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Actia.point.nom)
  return _impl_.nom_.Release();
}
inline void point::set_allocated_nom(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nom_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nom_.IsDefault()) {
          _impl_.nom_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Actia.point.nom)
}

// -------------------------------------------------------------------

// feature

// int32 id = 1;
inline void feature::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t feature::id() const {
  // @@protoc_insertion_point(field_get:Actia.feature.id)
  return _internal_id();
}
inline void feature::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Actia.feature.id)
}
inline ::int32_t feature::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void feature::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// string nom = 2;
inline void feature::clear_nom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nom_.ClearToEmpty();
}
inline const std::string& feature::nom() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Actia.feature.nom)
  return _internal_nom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void feature::set_nom(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nom_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Actia.feature.nom)
}
inline std::string* feature::mutable_nom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nom();
  // @@protoc_insertion_point(field_mutable:Actia.feature.nom)
  return _s;
}
inline const std::string& feature::_internal_nom() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nom_.Get();
}
inline void feature::_internal_set_nom(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nom_.Set(value, GetArena());
}
inline std::string* feature::_internal_mutable_nom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.nom_.Mutable( GetArena());
}
inline std::string* feature::release_nom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Actia.feature.nom)
  return _impl_.nom_.Release();
}
inline void feature::set_allocated_nom(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nom_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nom_.IsDefault()) {
          _impl_.nom_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Actia.feature.nom)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Actia


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_learning_5fexample_2eproto_2epb_2eh
